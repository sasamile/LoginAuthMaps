// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique
  password         String?
  name             String
  lastname         String
  phone            String?
  isAdmin          Boolean?      @default(false)
  file             String?
  isActive         Boolean?      @default(false)
  role             Role          @default(USER)
  emailVerified    DateTime?     @map("email_verified")
  passwordVerified DateTime?     @map("password_verified")
  image            String?
  Court            Court[]
  Reservation      Reservation[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
  SUPERUSER
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  userId     String
  identifier String

  @@index([userId, token])
  @@map("password_tokens")
}

model Court {
  id          String        @id @default(uuid())
  name        String        @db.String
  address     String        @db.String
  description String        @db.String
  dates       DateTime[]
  startTime   String        @db.String
  endTime     String        @db.String
  price       Float
  imageUrl    String[]      @db.String
  coordinates Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  Reservation Reservation[]
}

enum ReservationStatus {
  PENDING
  SUCCESS
  DENIED
}

model Reservation {
  id         String            @id @default(uuid())
  courtId    String
  court      Court             @relation(fields: [courtId], references: [id])
  userId     String
  user       User              @relation(fields: [userId], references: [id])
  date       DateTime
  startTime  String
  endTime    String
  totalHours Int
  totalPrice Float
  status     ReservationStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([courtId])
  @@index([userId])
  @@map("reservations")
}
